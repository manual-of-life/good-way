{
"version":3,
"file":"module$node_modules$$tauri_apps$api$primitives_cjs.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuB/GC,QAASA,kBAAiB,CAACC,QAAD,CAAWC,IAAA,CAAO,CAAA,CAAlB,CAAyB,CAC/C,MAAOC,OAAOC,CAAAA,mBAAoBJ,CAAAA,iBAA3B,CAA6CC,QAA7C,CAAuDC,IAAvD,CADwC,CAiEnDG,cAAeA,OAAM,CAACC,GAAD,CAAMC,IAAA,CAAO,EAAb,CAAiBC,OAAjB,CAA0B,CAC3C,MAAOL,OAAOC,CAAAA,mBAAoBC,CAAAA,MAA3B,CAAkCC,GAAlC,CAAuCC,IAAvC,CAA6CC,OAA7C,CADoC,CArF/C,IAAIC,UAAYZ,OAAA,CAAQ,kEAAR,CAuBhB,MAAMa,QAAN,CACIC,WAAW,EAAG,CAEV,IAAKC,CAAAA,wBAAL,CAAgC,CAAA,CAChCC,mBAAmBC,CAAAA,GAAnB,CAAuB,IAAvB,CAA6B,EAAA;AAAM,EAAnC,CAGA,KAAKC,CAAAA,EAAL,CAAUf,iBAAA,CAAmBgB,QAAD,EAAc,CACtCP,SAAUQ,CAAAA,sBAAV,CAAiC,IAAjC,CAAuCJ,kBAAvC,CAA2D,GAA3D,CAAgEK,CAAAA,IAAhE,CAAqE,IAArE,CAA2EF,QAA3E,CADsC,CAAhC,CANA,CAUV,aAAS,CAACG,OAAD,CAAU,CACnBV,SAAUW,CAAAA,sBAAV,CAAiC,IAAjC,CAAuCP,kBAAvC,CAA2DM,OAA3D,CAAoE,GAApE,CADmB,CAGnB,aAAY,EAAA,CACZ,MAAOV,UAAUQ,CAAAA,sBAAV,CAAiC,IAAjC,CAAuCJ,kBAAvC,CAA2D,GAA3D,CADK,CAGhBQ,MAAM,EAAG,CACL,MAAQ,eAAc,IAAKN,CAAAA,EAAnB,EADH,CAjBb,CAqBA,IAAAF,mBAAqB,IAAIS,OACzB,MAAMC,eAAN,CACIZ,WAAW,CAACa,MAAD,CAASC,KAAT,CAAgBC,SAAhB,CAA2B,CAClC,IAAKF,CAAAA,MAAL,CAAcA,MACd,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,SAAL,CAAiBA,SAHiB,CAKhCC,gBAAU,EAAG,CACf,MAAOtB,OAAA,CAAQ,UAAS,IAAKmB,CAAAA,MAAd,kBAAR;AAAgD,CACnDC,MAAO,IAAKA,CAAAA,KADuC,CAEnDC,UAAW,IAAKA,CAAAA,SAFmC,CAAhD,CADQ,CANvB,CA6EA3B,OAAQW,CAAAA,OAAR,CAAkBA,OAClBX,QAAQwB,CAAAA,cAAR,CAAyBA,cACzBxB,QAAQ6B,CAAAA,iBAAR,CA3DAA,cAAgC,CAACJ,MAAD,CAASC,KAAT,CAAgBI,EAAhB,CAAoB,CAChD,MAAMV,QAAU,IAAIT,OACpBS,QAAQW,CAAAA,SAAR,CAAoBD,EACpB,OAAOxB,OAAA,CAAQ,UAASmB,MAAT,oBAAR,CAA6C,CAAEC,KAAF,CAASN,OAAT,CAA7C,CAAiEY,CAAAA,IAAjE,CAAsE,EAAA,EAAM,IAAIR,cAAJ,CAAmBC,MAAnB,CAA2BC,KAA3B,CAAkCN,OAAQJ,CAAAA,EAA1C,CAA5E,CAHyC,CA4DpDhB,QAAQiC,CAAAA,cAAR,CAPAA,QAAuB,CAACC,QAAD,CAAWC,QAAA,CAAW,OAAtB,CAA+B,CAClD,MAAO/B,OAAOC,CAAAA,mBAAoB4B,CAAAA,cAA3B,CAA0CC,QAA1C,CAAoDC,QAApD,CAD2C,CAQtDnC,QAAQM,CAAAA,MAAR,CAAiBA,MACjBN,QAAQC,CAAAA,iBAAR;AAA4BA,iBAlImF;",
"sources":["node_modules/@tauri-apps/api/primitives.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tauri_apps$api$primitives_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nvar tslib_es6 = require('./external/tslib/tslib.es6.cjs');\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _Channel_onmessage;\n/**\n * Invoke your custom commands.\n *\n * This package is also accessible with `window.__TAURI__.tauri` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    return window.__TAURI_INTERNALS__.transformCallback(callback, once);\n}\nclass Channel {\n    constructor() {\n        // @ts-expect-error field used by the IPC serializer\n        this.__TAURI_CHANNEL_MARKER__ = true;\n        _Channel_onmessage.set(this, () => {\n            // no-op\n        });\n        this.id = transformCallback((response) => {\n            tslib_es6.__classPrivateFieldGet(this, _Channel_onmessage, \"f\").call(this, response);\n        });\n    }\n    set onmessage(handler) {\n        tslib_es6.__classPrivateFieldSet(this, _Channel_onmessage, handler, \"f\");\n    }\n    get onmessage() {\n        return tslib_es6.__classPrivateFieldGet(this, _Channel_onmessage, \"f\");\n    }\n    toJSON() {\n        return `__CHANNEL__:${this.id}`;\n    }\n}\n_Channel_onmessage = new WeakMap();\nclass PluginListener {\n    constructor(plugin, event, channelId) {\n        this.plugin = plugin;\n        this.event = event;\n        this.channelId = channelId;\n    }\n    async unregister() {\n        return invoke(`plugin:${this.plugin}|remove_listener`, {\n            event: this.event,\n            channelId: this.channelId\n        });\n    }\n}\n/**\n * Adds a listener to a plugin event.\n *\n * @returns The listener object to stop listening to the events.\n *\n * @since 2.0.0\n */\nasync function addPluginListener(plugin, event, cb) {\n    const handler = new Channel();\n    handler.onmessage = cb;\n    return invoke(`plugin:${plugin}|register_listener`, { event, handler }).then(() => new PluginListener(plugin, event, handler.id));\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/primitives';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @param options The request options.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}, options) {\n    return window.__TAURI_INTERNALS__.invoke(cmd, args, options);\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `http://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self' ipc: http://ipc.localhost; img-src 'self' asset: http://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/primitives';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI_INTERNALS__.convertFileSrc(filePath, protocol);\n}\n\nexports.Channel = Channel;\nexports.PluginListener = PluginListener;\nexports.addPluginListener = addPluginListener;\nexports.convertFileSrc = convertFileSrc;\nexports.invoke = invoke;\nexports.transformCallback = transformCallback;\n\n};"],
"names":["shadow$provide","global","require","module","exports","transformCallback","callback","once","window","__TAURI_INTERNALS__","invoke","cmd","args","options","tslib_es6","Channel","constructor","__TAURI_CHANNEL_MARKER__","_Channel_onmessage","set","id","response","__classPrivateFieldGet","call","handler","__classPrivateFieldSet","toJSON","WeakMap","PluginListener","plugin","event","channelId","unregister","addPluginListener","cb","onmessage","then","convertFileSrc","filePath","protocol"]
}
